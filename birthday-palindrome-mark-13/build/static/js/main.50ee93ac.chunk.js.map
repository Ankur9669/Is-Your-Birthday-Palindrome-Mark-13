{"version":3,"sources":["Loader.js","App.js","reportWebVitals.js","index.js"],"names":["Loader","className","App","useState","outputMessage","setOutputMessage","isLoaderVisible","setLoaderVisibility","date","setDate","daysInMonth","handleSubmit","checkPalindromeForAllFormats","Date","setTimeout","date1","date2","toReturnDate","getDate","toString","getDateAsString","month","toReturnMonth","getMonth","parseInt","getMonthAsString","year","getFullYear","getYearAsString","mmddyyyy","yyyymmdd","checkPalindrome","date3","diffTime","Math","abs","diffDays","ceil","isLeapYear","getNextDate","dateAsString","start","end","length","flag","for","type","onChange","e","target","value","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.50ee93ac.chunk.js","sourcesContent":["import React from 'react'\r\nimport \"./loader.css\"\r\nfunction Loader() {\r\n    return (\r\n        <div className = \"loader\">\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loader\r\n","import './App.css';\nimport { useState } from \"react\";\nimport Loader from './Loader';\n\nfunction App() \n{\n  const [outputMessage, setOutputMessage] = useState(\"Not Palindrome\");\n  const [isLoaderVisible, setLoaderVisibility] = useState(false);\n  const [date, setDate] = useState();\n  let date1;\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n  //On Clicking Submit button the control would come here\n  function handleSubmit()\n  {\n    setLoaderVisibility(true);\n    givePalindrome();\n    setTimeout(() => \n    {\n      setLoaderVisibility(false);\n    }, 3000)\n  }\n\n  function givePalindrome()\n  {\n    date1 = new Date(date);\n    checkPalindromeForAllFormats(date1);\n  }\n\n  function checkPalindromeForAllFormats(date1)\n  {\n    let date2 = getDateAsString(date1);\n    let month = getMonthAsString(date1);\n    let year = getYearAsString(date1);\n  \n    let ddmmyyyy = date2 + month + year;\n    let mmddyyyy = month + date2 + year;\n    let yyyymmdd = year + month + date2;\n\n    //If date is palindrome it would go here.\n    if(checkPalindrome(ddmmyyyy) || checkPalindrome(mmddyyyy) || checkPalindrome(yyyymmdd))\n    {\n        const date2 = new Date(date);\n        const date3 = new Date(date1);\n        const diffTime = Math.abs(date3 - date2);\n        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)); \n        // console.log(diffDays + \" days\");\n        // console.log(date1);\n        // console.log(\"Your Birthday is a palindrome\");\n        if(diffDays === 0)\n        {\n          setOutputMessage(\"Wooh ur BirthDay is a Palindrome\");\n        }\n        else{\n          setOutputMessage(\"Awww! Your birthdate is not palindrome. Nearest Palindrome is: \" + date1 +\". You Missed it by \"  + diffDays + \" days.\");\n        }\n    }\n    else{\n      //If date is not palindrome we increse date by 1.\n      getNextDate(date1);\n    }\n  }\n\n  function getNextDate(date1)\n  {\n    let date2 = date1.getDate();\n    let month = date1.getMonth() + 1;\n    let year = date1.getFullYear();\n\n    if (month === 2) \n    {\n      if (isLeapYear(year))\n      {\n        if (date2 > 29) \n        {\n          date2 = 1;\n          month = 3;\n        }\n        else{\n          date2++;\n        }\n      }\n      else {\n        if (date2 > 28) \n        {\n          date2 = 1;\n          month = 3;\n        }\n        else{\n          date2++;\n        }\n      }\n    }\n    else {\n      if (date2 >= daysInMonth[month - 1]) \n      {\n        date2 = 1;\n        month++;\n      }\n      else{\n        date2++;\n      }\n    }\n  \n    if (month > 12)\n    {\n      month = 1;\n      year++;\n    }\n\n    let temp = new Date(month + \"-\" + date2 + \"-\" + year);\n    checkPalindromeForAllFormats(temp);\n  }\n\n  //Function to check leap year\n  function isLeapYear(year) {\n\n    if (year % 400 === 0)\n      return true;\n  \n    if (year % 100 === 0)\n      return false;\n  \n    if (year % 4 === 0)\n      return true;\n  \n    return false;\n  }\n\n  //Function to get date as a string\n  function getDateAsString(date1)\n  {\n    let toReturnDate = \"\";\n    if (date1.getDate() < 10) {\n      toReturnDate = '0' + date1.getDate();\n    }\n    else {\n      toReturnDate = date1.getDate().toString();\n    }\n    return toReturnDate;\n  }\n\n  //Function to get month as a string\n  function getMonthAsString(date1)\n  {\n    let toReturnMonth = \"\";\n    if (date1.getMonth() < 10) {\n      toReturnMonth = '0' + parseInt(date1.getMonth()) + 1;\n    }\n    else {\n      toReturnMonth = (parseInt(date1.getMonth()) + 1).toString();\n    }\n    return toReturnMonth;\n  }\n\n  //Function to get year as a string\n  function getYearAsString(date1)\n  {\n    let toReturnYear = date1.getFullYear().toString();\n    return toReturnYear;\n  }\n\n  //Function to check palindrome\n  function checkPalindrome(dateAsString)\n  {\n    let start = 0;\n    let end = parseInt(dateAsString.length) - 1;\n    let flag = 1;\n    while(start < end)\n    {\n      if(dateAsString[start] === dateAsString[end])\n      {\n        start++;\n        end--;\n      }\n      else{\n        flag = 0;\n        break;\n      }\n    }\n    if(flag === 1)\n    {\n      return true;\n    }\n    else{\n      return false;\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className = \"app-header\">Check if Your Birthday Is Palindrome</header>\n\n      <label for = \"description\" className = \"sub-heading\">Enter your birthdate and we will \n      tell you if your birthdate is a palindrome</label>\n\n      <p className = \"description\">This app checks your birthdate in 4 formats yyyy-mm-dd, dd-mm-yyyy, mm-dd-yy, m-dd-yyyy\ne.g. if your birthdate is 01 Aug 1995, then app will check for 19950801, 01081995, 080195, 1081995</p>\n\n      <input type = \"date\" className = \"input\" onChange = {(e) => setDate(e.target.value)}></input>\n      <button className = \"button\" onClick = {() => handleSubmit()}>Check</button>\n\n      {isLoaderVisible && <Loader/>}\n      \n      {!isLoaderVisible && \n        <div className = \"output\">\n          {outputMessage}  \n        </div>\n      }\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n      import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n        getCLS(onPerfEntry);\r\n        getFID(onPerfEntry);\r\n        getFCP(onPerfEntry);\r\n        getLCP(onPerfEntry);\r\n        getTTFB(onPerfEntry);\r\n      });\r\n    }\r\n  };\r\n  \r\n  export default reportWebVitals;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["Loader.js","App.js","reportWebVitals.js","index.js"],"names":["Loader","className","App","date1","useState","outputMessage","setOutputMessage","isLoaderVisible","setLoaderVisibility","date","setDate","handleSubmit","console","log","dateInAllFormats","getDatesInAllFormat","getDateAsString","Date","isPalindrome","i","length","checkPalindrome","nextDate","getNextDate","year","month","day","ctr","getNextPalindromeDate","parseInt","givePalindrome","setTimeout","dateInStr","getDate","toString","getMonth","getFullYear","dateinStr","slice","dateAsString","start","end","flag","isLeapYear","for","type","onChange","e","target","value","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8f964cec.chunk.js","sourcesContent":["import React from 'react'\r\nimport \"./loader.css\"\r\nfunction Loader() {\r\n    return (\r\n        <div className = \"loader\">\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loader\r\n","import './App.css';\nimport { useState } from \"react\";\nimport Loader from './Loader';\n\nfunction App() \n{\n  const [outputMessage, setOutputMessage] = useState(\"Not Palindrome\");\n  const [isLoaderVisible, setLoaderVisibility] = useState(false);\n  const [date, setDate] = useState(null);\n  let date1;\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n  //On Clicking Submit button the control would come here\n  function handleSubmit()\n  {\n    setLoaderVisibility(true);\n    console.log(date);\n    if(date === null)\n    {\n      setOutputMessage(\"Pls Enter the Date\");\n    }\n    else{\n      givePalindrome();\n    }\n     \n    setTimeout(() => \n    {\n      setLoaderVisibility(false);\n    }, 1500)\n  }\n\n  function givePalindrome()\n  {\n    date1 = new Date(date);\n    let dateInStr = getDateAsString(date1);\n    let dateInAllFormats = getDatesInAllFormat(dateInStr);\n    let isPalindrome = false;\n    for (let i = 0; i < dateInAllFormats.length; i++)\n    {\n      if(checkPalindrome(dateInAllFormats[i]))\n      {\n        isPalindrome = true;\n        break;\n      }\n    }\n    if(isPalindrome)\n    {\n      setOutputMessage(\"Woh Your Birthdate is Palindrome\");\n    }\n    else{\n      let nextDate = getNextPalindromeDate(date1);\n      //console.log(nextDate);\n      setOutputMessage(\"Next Date is: \" \n      + nextDate[1].day + \n      \"-\" + \n      (parseInt(nextDate[1].month + 1)) +\n       \"-\" + \n       nextDate[1].year + \n       \" You Missed it by: \" \n       + nextDate[0] + \n       \" Days\");\n      console.log();\n    }\n  }\n\n  function getDateAsString(date)\n  {\n    var dateInStr = {day: '', month: '', year: ''};\n    if(parseInt(date.getDate()) < 10){\n      dateInStr.day = '0' + date.getDate();\n    }\n    else {\n      dateInStr.day = date.getDate().toString();\n    }\n    \n    if(parseInt(date.getMonth() + 1) < 10){\n      dateInStr.month = '0' + parseInt(date.getMonth() + 1);\n    }\n    else {\n      dateInStr.month = parseInt(date.getMonth() + 1).toString();\n    }\n    \n    dateInStr.year = date.getFullYear().toString();\n    return dateInStr;\n  }\n\n  function getDatesInAllFormat(dateinStr)\n  {\n    let dateInAllFormats = [\"\", \"\", \"\", \"\", \"\", \"\"];\n    if(dateinStr != null)\n    {  \n      dateInAllFormats[0] = dateinStr.day + dateinStr.month + dateinStr.year;\n      dateInAllFormats[1] = dateinStr.month + dateinStr.day + dateinStr.year;\n      dateInAllFormats[2] = dateinStr.year + dateinStr.month + dateinStr.day;\n      dateInAllFormats[3] = dateinStr.day + dateinStr.month + dateinStr.year.slice(2, 4);\n      dateInAllFormats[4] = dateinStr.month + dateinStr.day + dateinStr.year.slice(2, 4);\n      dateInAllFormats[5] = dateinStr.year.slice(2, 4) + dateinStr.month + dateinStr.day;\n    }\n    return dateInAllFormats;\n  }\n\n  //Function to check palindrome\n  function checkPalindrome(dateAsString)\n  {\n    let start = 0;\n    let end = parseInt(dateAsString.length) - 1;\n    let flag = 1;\n    while(start < end)\n    {\n      if(dateAsString[start] === dateAsString[end])\n      {\n        start++;\n        end--;\n      }\n      else{\n        flag = 0;\n        break;\n      }\n    }\n    if(flag === 1)\n    {\n      return true;\n    }\n    else{\n      return false;\n    }\n  }\n\n  function isLeapYear(year) {\n\n    if (year % 400 === 0)\n      return true;\n  \n    if (year % 100 === 0)\n      return false;\n  \n    if (year % 4 === 0)\n      return true;\n  \n    return false;\n  }\n  \n  function getNextDate(date) {\n    var day = parseInt(date.getDate()) + 1;\n    var month = parseInt(date.getMonth());\n    console.log(month)\n    var year = parseInt(date.getFullYear());\n    \n  \n    var daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  \n    if (month === 1) {\n      if (isLeapYear(year)) {\n        if (parseInt(day) > 29) {\n          day = 1;\n          month = 2;\n        }\n      }\n      else {\n        if (parseInt(day) > 28) {\n          day = 1;\n          month = 2;\n        }\n      }\n    }\n    else {\n      if (parseInt(day) > daysInMonth[month]) {\n        //console.log(day + \">\" + daysInMonth[month-1]);\n        day = 1;\n        month++;\n        \n      }\n    }\n  \n    if (parseInt(month) > 11) {\n      month = 0;\n      year++;\n    }\n  \n    return {\n      day: day,\n      month: month,\n      year: year\n    }\n  }\n  \n  \n  function getNextPalindromeDate(date) {\n  \n    //console.log(date);\n    var nextDate = getNextDate(date);\n    let date1 = new Date(nextDate.year, nextDate.month, nextDate.day);\n    console.log(nextDate)\n    //console.log(date1);\n    var ctr = 0;\n  \n    while (1) {\n      ctr++;\n      var dateStr = getDateAsString(date1);\n      let dateInAllFormats= getDatesInAllFormat(dateStr);\n      let isPalindrome = false;\n      for (let i = 0; i < dateInAllFormats.length; i++)\n      {\n        if(checkPalindrome(dateInAllFormats[i]))\n        {\n          //console.log(\"Yes\")\n          isPalindrome = true;\n          return [ctr, nextDate];\n        }\n        //console.log(dateInAllFormats[i]);\n      }\n      nextDate = getNextDate(date1);\n      date1 = new Date(nextDate.year, nextDate.month, nextDate.day);\n      console.log(nextDate);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div className = \"container\">\n      <header className = \"app-header\">Check if Your Birthday Is Palindrome</header>\n\n      <label for = \"description\" className = \"sub-heading\">Enter your birthdate and we will \n      tell you if your birthdate is a palindrome</label>\n\n      <p className = \"description\">This app checks your birthdate in 3 formats yyyy-mm-dd, dd-mm-yyyy, mm-dd-yy\ne.g. if your birthdate is 01 Aug 1995, then app will check for 19950801, 01081995, 080195, 1081995</p>\n\n      <input type = \"date\" className = \"input\" onChange = {(e) => setDate(e.target.value)}></input>\n      <button className = \"button\" onClick = {() => handleSubmit()}>Check</button>\n\n      {isLoaderVisible && <Loader/>}\n      \n      {!isLoaderVisible && \n        <div className = \"output\">\n          {outputMessage}  \n        </div>\n      }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n      import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n        getCLS(onPerfEntry);\r\n        getFID(onPerfEntry);\r\n        getFCP(onPerfEntry);\r\n        getLCP(onPerfEntry);\r\n        getTTFB(onPerfEntry);\r\n      });\r\n    }\r\n  };\r\n  \r\n  export default reportWebVitals;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}